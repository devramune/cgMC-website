// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 77KYUYm9JjmMdtJ5Ckst57
// Component: sXfvwMwww7Z
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: WHKZkoQfDP8713/component
import Button from "../../Button"; // plasmic-import: TjNmJ8EACMI288/component
import PriceCard from "../../PriceCard"; // plasmic-import: UN7KXdWhMCaApR/component
import ValueProp from "../../ValueProp"; // plasmic-import: ZtUpmv_mljRcEB/component
import FooterSection from "../../FooterSection"; // plasmic-import: eLHgM1HorTA5C3/component

import { useScreenVariants as useScreenVariantsqH0UcdnSbyLsq } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Q-h0UCDNSbyLSQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_coralia_mc.module.css"; // plasmic-import: 77KYUYm9JjmMdtJ5Ckst57/projectcss
import sty from "./PlasmicGrimmZiplines.module.css"; // plasmic-import: sXfvwMwww7Z/css

import AppleIcon from "./icons/PlasmicIcon__Apple"; // plasmic-import: j6pF-s8fPAPENq/icon
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: ReWV2gVegjvClb/icon
import CheckIcon from "./icons/PlasmicIcon__Check"; // plasmic-import: N3Q4qxG4dGvc_x/icon

export type PlasmicGrimmZiplines__VariantMembers = {};

export type PlasmicGrimmZiplines__VariantsArgs = {};
type VariantPropType = keyof PlasmicGrimmZiplines__VariantsArgs;
export const PlasmicGrimmZiplines__VariantProps = new Array<VariantPropType>();

export type PlasmicGrimmZiplines__ArgsType = {};
type ArgPropType = keyof PlasmicGrimmZiplines__ArgsType;
export const PlasmicGrimmZiplines__ArgProps = new Array<ArgPropType>();

export type PlasmicGrimmZiplines__OverridesType = {
  root?: p.Flex<"div">;
  navbar?: p.Flex<typeof Navbar>;
  headerHeroSection?: p.Flex<"div">;
  section?: p.Flex<"section">;
  foreground3?: p.Flex<"div">;
  foreground4?: p.Flex<"div">;
  headerHeroSection3?: p.Flex<"div">;
  foreground5?: p.Flex<"div">;
  headerHeroSection4?: p.Flex<"div">;
  foreground6?: p.Flex<"div">;
  footerSection?: p.Flex<typeof FooterSection>;
};

export interface DefaultGrimmZiplinesProps {}

function PlasmicGrimmZiplines__RenderFunc(props: {
  variants: PlasmicGrimmZiplines__VariantsArgs;
  args: PlasmicGrimmZiplines__ArgsType;
  overrides: PlasmicGrimmZiplines__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqH0UcdnSbyLsq()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />

        <title key="title">{"Grimm Ziplines"}</title>

        <meta key="og:title" property="og:title" content={"Grimm Ziplines"} />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={"Grimm Ziplines"}
        />

        <meta
          key="og:image"
          property="og:image"
          content={
            "https://site-assets.plasmic.app/4a878dd7e5b4f705b06fc9f31260fd5f.png"
          }
        />

        <meta
          key="twitter:image"
          name="twitter:image"
          content={
            "https://site-assets.plasmic.app/4a878dd7e5b4f705b06fc9f31260fd5f.png"
          }
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"headerHeroSection"}
            data-plasmic-override={overrides.headerHeroSection}
            hasGap={true}
            className={classNames(projectcss.all, sty.headerHeroSection)}
          >
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div className={classNames(projectcss.all, sty.freeBox__rwbBx)} />
            ) : null}

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__mRrMy)}
            >
              <div className={classNames(projectcss.all, sty.column__igglj)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__bi98N)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__xhifx)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___1DKvj
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fveZ4
                        )}
                      >
                        {"NEW!"}
                      </div>
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rfC8
                      )}
                    >
                      {"Grimm Ziplines"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mHKcc
                      )}
                    >
                      {
                        "Fly through the air at Grimm Ziplines, over 50 meters above the ground, soaring with the birds."
                      }
                    </div>
                  </p.Stack>
                </p.Stack>
              </div>
            </p.Stack>
          </p.Stack>

          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"foreground3"}
              data-plasmic-override={overrides.foreground3}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground3)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__sfP2N)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mBjZi
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <h1
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1__aM5Vy
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          {
                            <h1
                              className={classNames(
                                projectcss.all,
                                projectcss.h1,
                                projectcss.__wab_text,
                                sty.h1__b31P
                              )}
                            >
                              <React.Fragment>
                                <React.Fragment>{""}</React.Fragment>
                                {
                                  <h1
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h1,
                                      projectcss.__wab_text,
                                      sty.h1__yUnAd
                                    )}
                                  >
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{
                                          color: "#000000",
                                          fontWeight: 600
                                        }}
                                      >
                                        {"Courses"}
                                      </span>
                                    </React.Fragment>
                                  </h1>
                                }
                                <React.Fragment>{""}</React.Fragment>
                              </React.Fragment>
                            </h1>
                          }
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </h1>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
              </p.Stack>
            </p.Stack>
          </section>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__iyuxR)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"foreground4"}
              data-plasmic-override={overrides.foreground4}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground4)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kxWis
                )}
              >
                {" "}
              </div>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"headerHeroSection3"}
            data-plasmic-override={overrides.headerHeroSection3}
            hasGap={true}
            className={classNames(projectcss.all, sty.headerHeroSection3)}
          >
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div className={classNames(projectcss.all, sty.freeBox__bJO7)} />
            ) : null}

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__ar7Gh)}
            >
              <div className={classNames(projectcss.all, sty.column___9XYaH)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___5ZjCb)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__tEsh3)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___8M7Kd
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fkChx
                        )}
                      >
                        {"NEW!"}
                      </div>
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__afHNs
                      )}
                    >
                      {"Grimm Solis"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__elXDw
                      )}
                    >
                      {
                        "During the day, fly through the air like a bird, over 80 meters above the ground; with an amazing view of all of the Grimm Parks."
                      }
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__dkdfR)}
                  >
                    <Button
                      className={classNames("__wab_instance", sty.button__nrSe)}
                      color={"darkGray" as const}
                      endIcon={
                        <ChevronRightIcon
                          className={classNames(projectcss.all, sty.svg__o3EK)}
                          role={"img"}
                        />
                      }
                      link={"/grimmparks/grimmziplines/grimmsolis" as const}
                      outline={true}
                      showEndIcon={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7JmJi
                        )}
                      >
                        {"Go"}
                      </div>
                    </Button>
                  </p.Stack>
                </p.Stack>
              </div>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__tr4Pe)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"foreground5"}
              data-plasmic-override={overrides.foreground5}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground5)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__s542
                )}
              >
                {" "}
              </div>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"headerHeroSection4"}
            data-plasmic-override={overrides.headerHeroSection4}
            hasGap={true}
            className={classNames(projectcss.all, sty.headerHeroSection4)}
          >
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div className={classNames(projectcss.all, sty.freeBox__ocZzg)} />
            ) : null}

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__c6EG)}
            >
              <div className={classNames(projectcss.all, sty.column__viiqe)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ljdYh)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__vWoa6)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox___2RMS)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qsqOe
                        )}
                      >
                        {"NEW!"}
                      </div>
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__l8HSv
                      )}
                    >
                      {"Grimm Lunae"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zAbE6
                      )}
                    >
                      {
                        "At midnight, fly through a ring of fire through the icy tundra, over 50 meters above the ground; at Grimm Lunae."
                      }
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__b5Y4T)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__tgxuq
                      )}
                      color={"darkGray" as const}
                      endIcon={
                        <ChevronRightIcon
                          className={classNames(projectcss.all, sty.svg__kdn)}
                          role={"img"}
                        />
                      }
                      link={"/grimmparks/grimmziplines/grimmlunae" as const}
                      outline={true}
                      showEndIcon={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zvVPm
                        )}
                      >
                        {"Go"}
                      </div>
                    </Button>
                  </p.Stack>
                </p.Stack>
              </div>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__q6Jm)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"foreground6"}
              data-plasmic-override={overrides.foreground6}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground6)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___99Htq
                )}
              >
                {" "}
              </div>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__rEng)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__e9Agh)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zQnRz)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__pk6Uh)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__z1XW
                    )}
                  >
                    {"Ticket prices"}
                  </div>
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jYk2W
                  )}
                >
                  {
                    "Ticket prices vary for what experience you want to have at Grimm Parks. All prices in in-game money."
                  }
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__i81T)}
              >
                <PriceCard
                  className={classNames(
                    "__wab_instance",
                    sty.priceCard___13Ag8
                  )}
                  description={
                    <React.Fragment>
                      <ValueProp
                        className={classNames(
                          "__wab_instance",
                          sty.valueProp__sKrTo
                        )}
                        description={"Access to all areas of the ALDG park."}
                        flatIcon={true}
                        icon={
                          <CheckIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__vvVW
                            )}
                            role={"img"}
                          />
                        }
                        noTitle={true}
                      />

                      <ValueProp
                        className={classNames(
                          "__wab_instance",
                          sty.valueProp__bejX
                        )}
                        description={
                          "Transportation through Tabantha road system and PHB airport."
                        }
                        flatIcon={true}
                        icon={
                          <CheckIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__p7WRu
                            )}
                            role={"img"}
                          />
                        }
                        noTitle={true}
                      />
                    </React.Fragment>
                  }
                  dollars={"750"}
                  label={"a land dark and grimm"}
                />

                <PriceCard
                  className={classNames("__wab_instance", sty.priceCard__znOlg)}
                  description={
                    <React.Fragment>
                      <ValueProp
                        className={classNames(
                          "__wab_instance",
                          sty.valueProp__ikCM
                        )}
                        description={"Access to all areas of the ALDG park."}
                        flatIcon={true}
                        icon={
                          <CheckIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__aPRiw
                            )}
                            role={"img"}
                          />
                        }
                        noTitle={true}
                      />

                      <ValueProp
                        className={classNames(
                          "__wab_instance",
                          sty.valueProp__kkPa8
                        )}
                        description={
                          "Access to all areas of the Grimm Splash waterpark."
                        }
                        flatIcon={true}
                        icon={
                          <CheckIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__j7D0I
                            )}
                            role={"img"}
                          />
                        }
                        noTitle={true}
                      />

                      <ValueProp
                        className={classNames(
                          "__wab_instance",
                          sty.valueProp__ivj0E
                        )}
                        description={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tQWo0
                            )}
                          >
                            {"Access to buffet at Devil's Meal in Hell."}
                          </div>
                        }
                        flatIcon={true}
                        icon={
                          <CheckIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__drrde
                            )}
                            role={"img"}
                          />
                        }
                        noTitle={true}
                      />

                      <ValueProp
                        className={classNames(
                          "__wab_instance",
                          sty.valueProp__wx6Tx
                        )}
                        description={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__j7NeY
                            )}
                          >
                            {
                              "Transportation through Tabantha road system and PHB airport."
                            }
                          </div>
                        }
                        flatIcon={true}
                        icon={
                          <CheckIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__bc3K
                            )}
                            role={"img"}
                          />
                        }
                        noTitle={true}
                      />
                    </React.Fragment>
                  }
                  dollars={"1250"}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5Ckht
                      )}
                    >
                      {"A LAnd dark and grimm + grimm splash"}
                    </div>
                  }
                />

                <PriceCard
                  className={classNames("__wab_instance", sty.priceCard__xsSlO)}
                  description={
                    <React.Fragment>
                      <ValueProp
                        className={classNames(
                          "__wab_instance",
                          sty.valueProp__i6ZKp
                        )}
                        description={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__fIrqX
                            )}
                          >
                            {"Access to all areas of ALDG park."}
                          </div>
                        }
                        flatIcon={true}
                        icon={
                          <CheckIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__sdPzf
                            )}
                            role={"img"}
                          />
                        }
                        noTitle={true}
                      />

                      <ValueProp
                        className={classNames(
                          "__wab_instance",
                          sty.valueProp__a7Kvl
                        )}
                        description={
                          "Access to all areas of the Grimm Splash waterpark."
                        }
                        flatIcon={true}
                        icon={
                          <CheckIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__rwdD6
                            )}
                            role={"img"}
                          />
                        }
                        noTitle={true}
                      />

                      <ValueProp
                        className={classNames(
                          "__wab_instance",
                          sty.valueProp__uAoRw
                        )}
                        description={
                          "Access to buffet at  Devil's Meal in Hell."
                        }
                        flatIcon={true}
                        icon={
                          <CheckIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__yjn7C
                            )}
                            role={"img"}
                          />
                        }
                        noTitle={true}
                      />

                      <ValueProp
                        className={classNames(
                          "__wab_instance",
                          sty.valueProp__yx9Lz
                        )}
                        description={
                          "A zipline trip at either Grimm Solis or Lunae."
                        }
                        flatIcon={true}
                        icon={
                          <CheckIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__naDeM
                            )}
                            role={"img"}
                          />
                        }
                        noTitle={true}
                      />

                      <ValueProp
                        className={classNames(
                          "__wab_instance",
                          sty.valueProp___8G6Wl
                        )}
                        description={
                          "Transportation through Tabantha road system and PHB airport."
                        }
                        flatIcon={true}
                        icon={
                          <CheckIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___8PBa1
                            )}
                            role={"img"}
                          />
                        }
                        noTitle={true}
                      />
                    </React.Fragment>
                  }
                  dollars={"1750"}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cNs7
                      )}
                    >
                      {"grimm pass"}
                    </div>
                  }
                />

                <PriceCard
                  className={classNames("__wab_instance", sty.priceCard__ef7Oa)}
                  description={
                    <React.Fragment>
                      <ValueProp
                        className={classNames(
                          "__wab_instance",
                          sty.valueProp__c96K
                        )}
                        description={"Access to all areas of ALDG park."}
                        flatIcon={true}
                        icon={
                          <CheckIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__xGn7M
                            )}
                            role={"img"}
                          />
                        }
                        noTitle={true}
                      />

                      <ValueProp
                        className={classNames(
                          "__wab_instance",
                          sty.valueProp__t8Bl5
                        )}
                        description={
                          "Access to all areas of the Grimm Splash waterpark."
                        }
                        flatIcon={true}
                        icon={
                          <CheckIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__sDvPy
                            )}
                            role={"img"}
                          />
                        }
                        noTitle={true}
                      />

                      <ValueProp
                        className={classNames(
                          "__wab_instance",
                          sty.valueProp__yyUz
                        )}
                        description={
                          "Access to buffet at Devil's Meal in Hell."
                        }
                        flatIcon={true}
                        icon={
                          <CheckIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__ibFgV
                            )}
                            role={"img"}
                          />
                        }
                        noTitle={true}
                      />

                      <ValueProp
                        className={classNames(
                          "__wab_instance",
                          sty.valueProp__g75Rw
                        )}
                        description={
                          "A zipline trip at Grimm Solis and/or Lunae."
                        }
                        flatIcon={true}
                        icon={
                          <CheckIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__ohsBg
                            )}
                            role={"img"}
                          />
                        }
                        noTitle={true}
                      />

                      <ValueProp
                        className={classNames(
                          "__wab_instance",
                          sty.valueProp__juy5H
                        )}
                        description={
                          "A 3-day stay at Grimm Vista Westlands or Shoreline."
                        }
                        flatIcon={true}
                        icon={
                          <CheckIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___4XOi0
                            )}
                            role={"img"}
                          />
                        }
                        noTitle={true}
                      />

                      <ValueProp
                        className={classNames(
                          "__wab_instance",
                          sty.valueProp__sc1Kh
                        )}
                        description={
                          "Transportation through Tabantha road system and PHB airport."
                        }
                        flatIcon={true}
                        icon={
                          <CheckIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__wOm9D
                            )}
                            role={"img"}
                          />
                        }
                        noTitle={true}
                      />
                    </React.Fragment>
                  }
                  dollars={"2750"}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__v0LCy
                      )}
                    >
                      {"Grimm stay"}
                    </div>
                  }
                  primary={true}
                />
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <FooterSection
            data-plasmic-name={"footerSection"}
            data-plasmic-override={overrides.footerSection}
            className={classNames("__wab_instance", sty.footerSection)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "headerHeroSection",
    "section",
    "foreground3",
    "foreground4",
    "headerHeroSection3",
    "foreground5",
    "headerHeroSection4",
    "foreground6",
    "footerSection"
  ],
  navbar: ["navbar"],
  headerHeroSection: ["headerHeroSection"],
  section: ["section", "foreground3"],
  foreground3: ["foreground3"],
  foreground4: ["foreground4"],
  headerHeroSection3: ["headerHeroSection3"],
  foreground5: ["foreground5"],
  headerHeroSection4: ["headerHeroSection4"],
  foreground6: ["foreground6"],
  footerSection: ["footerSection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  headerHeroSection: "div";
  section: "section";
  foreground3: "div";
  foreground4: "div";
  headerHeroSection3: "div";
  foreground5: "div";
  headerHeroSection4: "div";
  foreground6: "div";
  footerSection: typeof FooterSection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGrimmZiplines__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGrimmZiplines__VariantsArgs;
    args?: PlasmicGrimmZiplines__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGrimmZiplines__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicGrimmZiplines__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicGrimmZiplines__ArgProps,
          internalVariantPropNames: PlasmicGrimmZiplines__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicGrimmZiplines__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGrimmZiplines";
  } else {
    func.displayName = `PlasmicGrimmZiplines.${nodeName}`;
  }
  return func;
}

export const PlasmicGrimmZiplines = Object.assign(
  // Top-level PlasmicGrimmZiplines renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    headerHeroSection: makeNodeComponent("headerHeroSection"),
    section: makeNodeComponent("section"),
    foreground3: makeNodeComponent("foreground3"),
    foreground4: makeNodeComponent("foreground4"),
    headerHeroSection3: makeNodeComponent("headerHeroSection3"),
    foreground5: makeNodeComponent("foreground5"),
    headerHeroSection4: makeNodeComponent("headerHeroSection4"),
    foreground6: makeNodeComponent("foreground6"),
    footerSection: makeNodeComponent("footerSection"),

    // Metadata about props expected for PlasmicGrimmZiplines
    internalVariantProps: PlasmicGrimmZiplines__VariantProps,
    internalArgProps: PlasmicGrimmZiplines__ArgProps
  }
);

export default PlasmicGrimmZiplines;
/* prettier-ignore-end */
