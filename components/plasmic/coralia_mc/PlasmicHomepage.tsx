// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 77KYUYm9JjmMdtJ5Ckst57
// Component: zFhblmpd5I2OT
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: WHKZkoQfDP8713/component
import Button from "../../Button"; // plasmic-import: TjNmJ8EACMI288/component
import Section from "../../Section"; // plasmic-import: euzoqoePqSeLwx/component
import ValueProp from "../../ValueProp"; // plasmic-import: ZtUpmv_mljRcEB/component
import ListItem from "../../ListItem"; // plasmic-import: NcN0Aa5WBeOCIo/component
import CallToActionSection from "../../CallToActionSection"; // plasmic-import: IiR3jQqv0epaDK/component
import FooterSection from "../../FooterSection"; // plasmic-import: eLHgM1HorTA5C3/component

import { useScreenVariants as useScreenVariantsqH0UcdnSbyLsq } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Q-h0UCDNSbyLSQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_coralia_mc.module.css"; // plasmic-import: 77KYUYm9JjmMdtJ5Ckst57/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: zFhblmpd5I2OT/css

import AppleIcon from "./icons/PlasmicIcon__Apple"; // plasmic-import: j6pF-s8fPAPENq/icon
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: ReWV2gVegjvClb/icon
import CheckIcon from "./icons/PlasmicIcon__Check"; // plasmic-import: N3Q4qxG4dGvc_x/icon
import CheckCircleIcon from "./icons/PlasmicIcon__CheckCircle"; // plasmic-import: Ee4sGqc2aP80wb/icon

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  headerHeroSection?: p.Flex<"div">;
  navbar?: p.Flex<typeof Navbar>;
  valuePropsSection?: p.Flex<typeof Section>;
  checkpointsSection?: p.Flex<typeof Section>;
  callToActionSection?: p.Flex<typeof CallToActionSection>;
  img?: p.Flex<typeof p.PlasmicImg>;
  footerSection?: p.Flex<typeof FooterSection>;
};

export interface DefaultHomepageProps {}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqH0UcdnSbyLsq()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />

        <title key="title">{"Home"}</title>

        <meta key="og:title" property="og:title" content={"Home"} />

        <meta key="twitter:title" name="twitter:title" content={"Home"} />

        <meta
          key="og:image"
          property="og:image"
          content={
            "https://site-assets.plasmic.app/ab99ba2621db2ef84710927b5409707f.webp"
          }
        />

        <meta
          key="twitter:image"
          name="twitter:image"
          content={
            "https://site-assets.plasmic.app/ab99ba2621db2ef84710927b5409707f.webp"
          }
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"headerHeroSection"}
            data-plasmic-override={overrides.headerHeroSection}
            hasGap={true}
            className={classNames(projectcss.all, sty.headerHeroSection)}
          >
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div className={classNames(projectcss.all, sty.freeBox__xxzXb)}>
                <Navbar
                  data-plasmic-name={"navbar"}
                  data-plasmic-override={overrides.navbar}
                  className={classNames("__wab_instance", sty.navbar)}
                />
              </div>
            ) : null}

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__yt3Nh)}
            >
              <div className={classNames(projectcss.all, sty.column__aD6E)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ohEjj)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__pJfTk)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xtTkT)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4TNnm
                        )}
                      >
                        {"NEW!"}
                      </div>
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xeyVa
                      )}
                    >
                      {"A land Dark and Grimm"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uwHnC
                      )}
                    >
                      {
                        "Grimm Parks' medieval-themed amusement park in the heart of Hook Bay."
                      }
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___859It)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__ghulG
                      )}
                      color={"darkGray" as const}
                      endIcon={
                        <ChevronRightIcon
                          className={classNames(projectcss.all, sty.svg__uuLvZ)}
                          role={"img"}
                        />
                      }
                      link={"/grimmparks/aldg" as const}
                      outline={true}
                      showEndIcon={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sIyj1
                        )}
                      >
                        {"Go"}
                      </div>
                    </Button>
                  </p.Stack>
                </p.Stack>
              </div>
            </p.Stack>
          </p.Stack>

          <Section
            data-plasmic-name={"valuePropsSection"}
            data-plasmic-override={overrides.valuePropsSection}
            className={classNames("__wab_instance", sty.valuePropsSection)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__pqvrS)}
            >
              <div className={classNames(projectcss.all, sty.freeBox___8UKxL)}>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__tW7Cj
                  )}
                >
                  {"The preferred minecraft towny server"}
                </h2>
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aNhlN
                )}
              >
                {
                  "CoraliaMC is the preferred minecraft towny server for people who take towny seriously."
                }
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__i1O3J)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__pmxbR)}
              >
                <ValueProp
                  className={classNames("__wab_instance", sty.valueProp__sim26)}
                  description={
                    "Making a town is seamless and fast, and it is easy to gain a community."
                  }
                  flatIcon={true}
                  icon={
                    <CheckIcon
                      className={classNames(projectcss.all, sty.svg__vnNve)}
                      role={"img"}
                    />
                  }
                  title={"Creating a community is easy"}
                />

                <ValueProp
                  className={classNames("__wab_instance", sty.valueProp__bGnd)}
                  description={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tMkHv
                      )}
                    >
                      {
                        "CoraliaMC uses cloudflare's port forwarding and DNS services, making creating and playing easy."
                      }
                    </div>
                  }
                  flatIcon={true}
                  icon={
                    <CheckIcon
                      className={classNames(projectcss.all, sty.svg___98Wtk)}
                      role={"img"}
                    />
                  }
                  title={"No lag"}
                />

                <ValueProp
                  className={classNames(
                    "__wab_instance",
                    sty.valueProp___37MTh
                  )}
                  description={
                    "CoraliaMC has a dynmap, making the process of traveling seamless."
                  }
                  flatIcon={true}
                  icon={
                    <CheckIcon
                      className={classNames(projectcss.all, sty.svg__frZti)}
                      role={"img"}
                    />
                  }
                  title={"Dynmap"}
                />

                <ValueProp
                  className={classNames("__wab_instance", sty.valueProp__bporR)}
                  description={
                    "Top-tier amusement parks that wow and amaze people with each and every visit."
                  }
                  flatIcon={true}
                  icon={
                    <CheckIcon
                      className={classNames(projectcss.all, sty.svg__segr7)}
                      role={"img"}
                    />
                  }
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ckREa
                      )}
                    >
                      {"Grimm Parks"}
                    </div>
                  }
                />
              </p.Stack>
            </p.Stack>
          </Section>

          <Section
            data-plasmic-name={"checkpointsSection"}
            data-plasmic-override={overrides.checkpointsSection}
            background={"dark" as const}
            className={classNames("__wab_instance", sty.checkpointsSection)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__sdVe)}
              id={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("features" as const)
                  : ("features" as const)
              }
            >
              <div className={classNames(projectcss.all, sty.column__ybDpa)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___9W68T)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jkAe4
                    )}
                  >
                    {"For those starting out"}
                  </div>

                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__yhTm6
                    )}
                  >
                    {"Need help?"}
                  </h2>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nh4Sm
                    )}
                  >
                    {
                      "We have a welcoming community that is willing to help out with whatever you need. Join the guilded to join the community!"
                    }
                  </div>

                  <Button
                    className={classNames("__wab_instance", sty.button__yOvTp)}
                    endIcon={
                      <ChevronRightIcon
                        className={classNames(projectcss.all, sty.svg__i7E9G)}
                        role={"img"}
                      />
                    }
                    flat={true}
                    link={"https://www.guilded.gg/i/pL85eAbp" as const}
                    showEndIcon={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qhocM
                      )}
                    >
                      {"Join the Guilded server"}
                    </div>
                  </Button>
                </p.Stack>
              </div>

              <div className={classNames(projectcss.all, sty.column__pyDsK)}>
                <div className={classNames(projectcss.all, sty.freeBox__vbmH)}>
                  <ListItem
                    bottomBorder={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("dark" as const)
                        : ("dark" as const)
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.listItem__xw9PE
                    )}
                    icon={
                      <CheckCircleIcon
                        className={classNames(projectcss.all, sty.svg__vwByv)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sXoaz
                      )}
                    >
                      {"EssentialsX"}
                    </div>
                  </ListItem>

                  <ListItem
                    bottomBorder={"dark" as const}
                    className={classNames(
                      "__wab_instance",
                      sty.listItem___5GcOh
                    )}
                    icon={
                      <CheckCircleIcon
                        className={classNames(projectcss.all, sty.svg___6QIYx)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xK11
                      )}
                    >
                      {"Towny"}
                    </div>
                  </ListItem>

                  <ListItem
                    bottomBorder={"dark" as const}
                    className={classNames(
                      "__wab_instance",
                      sty.listItem___4Q1W
                    )}
                    icon={
                      <CheckCircleIcon
                        className={classNames(projectcss.all, sty.svg__osOjg)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__y9W0Q
                      )}
                    >
                      {"Democracy"}
                    </div>
                  </ListItem>

                  <ListItem
                    bottomBorder={"dark" as const}
                    className={classNames(
                      "__wab_instance",
                      sty.listItem__vkL9O
                    )}
                    icon={
                      <CheckCircleIcon
                        className={classNames(projectcss.all, sty.svg__yvJx)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hb46B
                      )}
                    >
                      {"Help to get started"}
                    </div>
                  </ListItem>

                  <ListItem
                    className={classNames("__wab_instance", sty.listItem__y5Dh)}
                    icon={
                      <CheckCircleIcon
                        className={classNames(projectcss.all, sty.svg__kysJ4)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6MnKk
                      )}
                    >
                      {"Welcoming community"}
                    </div>
                  </ListItem>
                </div>
              </div>
            </p.Stack>
          </Section>

          <CallToActionSection
            data-plasmic-name={"callToActionSection"}
            data-plasmic-override={overrides.callToActionSection}
            className={classNames("__wab_instance", sty.callToActionSection)}
            image={{
              src: "/plasmic/coralia_mc/images/_20220701115817Png.png",
              fullWidth: 1920,
              fullHeight: 1080,
              aspectRatio: undefined
            }}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ibGmj)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___54E6C
                )}
              >
                {"Welcome"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__e5StT
                )}
              >
                {"Let's go"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__klYkV
                )}
              >
                {
                  "Apply for the allowlist to join the server and start having fun!"
                }
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__fZxPv)}
            >
              <Button
                className={classNames("__wab_instance", sty.button___5X3GQ)}
                color={"blue" as const}
                endIcon={
                  <ChevronRightIcon
                    className={classNames(projectcss.all, sty.svg__v2K0Q)}
                    role={"img"}
                  />
                }
                link={"https://forms.gle/ed2ku3R2kvuL26ei8" as const}
                showEndIcon={true}
              >
                {"Apply for allowlist"}
              </Button>

              <Button
                bgDifference={true}
                className={classNames("__wab_instance", sty.button__v5SzG)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zcXum
                  )}
                >
                  {"Learn more…"}
                </div>
              </Button>
            </p.Stack>
          </CallToActionSection>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__nZnBe)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__zJHe)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__dykkJ)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__ryZut)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pFhL
                    )}
                  >
                    {"Server address"}
                  </div>
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vpFpY
                  )}
                >
                  {
                    "To join, just type in coraliamc.com in your multiplayer server address slot and if you're whitelisted, you'll be able to join!"
                  }
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__maHt)}
              >
                <p.PlasmicImg
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/coralia_mc/images/screenShot20220817At41048PMpng.png",
                    fullWidth: 635,
                    fullHeight: 127,
                    aspectRatio: undefined
                  }}
                />
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <FooterSection
            data-plasmic-name={"footerSection"}
            data-plasmic-override={overrides.footerSection}
            className={classNames("__wab_instance", sty.footerSection)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerHeroSection",
    "navbar",
    "valuePropsSection",
    "checkpointsSection",
    "callToActionSection",
    "img",
    "footerSection"
  ],
  headerHeroSection: ["headerHeroSection", "navbar"],
  navbar: ["navbar"],
  valuePropsSection: ["valuePropsSection"],
  checkpointsSection: ["checkpointsSection"],
  callToActionSection: ["callToActionSection"],
  img: ["img"],
  footerSection: ["footerSection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerHeroSection: "div";
  navbar: typeof Navbar;
  valuePropsSection: typeof Section;
  checkpointsSection: typeof Section;
  callToActionSection: typeof CallToActionSection;
  img: typeof p.PlasmicImg;
  footerSection: typeof FooterSection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerHeroSection: makeNodeComponent("headerHeroSection"),
    navbar: makeNodeComponent("navbar"),
    valuePropsSection: makeNodeComponent("valuePropsSection"),
    checkpointsSection: makeNodeComponent("checkpointsSection"),
    callToActionSection: makeNodeComponent("callToActionSection"),
    img: makeNodeComponent("img"),
    footerSection: makeNodeComponent("footerSection"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
