// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 77KYUYm9JjmMdtJ5Ckst57
// Component: VDGf5byMaq6
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: WHKZkoQfDP8713/component
import ValueProp from "../../ValueProp"; // plasmic-import: ZtUpmv_mljRcEB/component
import Section from "../../Section"; // plasmic-import: euzoqoePqSeLwx/component
import Button from "../../Button"; // plasmic-import: TjNmJ8EACMI288/component
import ListItem from "../../ListItem"; // plasmic-import: NcN0Aa5WBeOCIo/component
import FooterSection from "../../FooterSection"; // plasmic-import: eLHgM1HorTA5C3/component

import { useScreenVariants as useScreenVariantsqH0UcdnSbyLsq } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Q-h0UCDNSbyLSQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_coralia_mc.module.css"; // plasmic-import: 77KYUYm9JjmMdtJ5Ckst57/projectcss
import sty from "./PlasmicCoralia.module.css"; // plasmic-import: VDGf5byMaq6/css

import Image34Icon from "./icons/PlasmicIcon__Image34"; // plasmic-import: iPkVJ_nD-9Imhu/icon
import WandIcon from "./icons/PlasmicIcon__Wand"; // plasmic-import: Hw8wN5hfAU9FVf/icon
import FastIcon from "./icons/PlasmicIcon__Fast"; // plasmic-import: KeUnhQHf4fnXbd/icon
import QuotessvgIcon from "./icons/PlasmicIcon__Quotessvg"; // plasmic-import: U-7WybzL4izt/icon
import AppleIcon from "./icons/PlasmicIcon__Apple"; // plasmic-import: j6pF-s8fPAPENq/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: swj1eOSRLQ/icon
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: ReWV2gVegjvClb/icon
import CheckCircleIcon from "./icons/PlasmicIcon__CheckCircle"; // plasmic-import: Ee4sGqc2aP80wb/icon

export type PlasmicCoralia__VariantMembers = {};

export type PlasmicCoralia__VariantsArgs = {};
type VariantPropType = keyof PlasmicCoralia__VariantsArgs;
export const PlasmicCoralia__VariantProps = new Array<VariantPropType>();

export type PlasmicCoralia__ArgsType = {};
type ArgPropType = keyof PlasmicCoralia__ArgsType;
export const PlasmicCoralia__ArgProps = new Array<ArgPropType>();

export type PlasmicCoralia__OverridesType = {
  root?: p.Flex<"div">;
  navbar?: p.Flex<typeof Navbar>;
  foreground4?: p.Flex<"div">;
  foreground3?: p.Flex<"div">;
  checkpointsSection?: p.Flex<typeof Section>;
  footerSection?: p.Flex<typeof FooterSection>;
};

export interface DefaultCoraliaProps {}

function PlasmicCoralia__RenderFunc(props: {
  variants: PlasmicCoralia__VariantsArgs;
  args: PlasmicCoralia__ArgsType;
  overrides: PlasmicCoralia__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqH0UcdnSbyLsq()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />

        <title key="title">{"Coralia+"}</title>

        <meta key="og:title" property="og:title" content={"Coralia+"} />

        <meta key="twitter:title" name="twitter:title" content={"Coralia+"} />

        <meta
          key="og:image"
          property="og:image"
          content={
            "https://site-assets.plasmic.app/8fe6740ef81aff19db35e0eb2dfef58d.png"
          }
        />

        <meta
          key="twitter:image"
          name="twitter:image"
          content={
            "https://site-assets.plasmic.app/8fe6740ef81aff19db35e0eb2dfef58d.png"
          }
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <section className={classNames(projectcss.all, sty.section__p3RcR)}>
            <p.Stack
              as={"div"}
              data-plasmic-name={"foreground4"}
              data-plasmic-override={overrides.foreground4}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground4)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___7OoP9)}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mB6Fo)}
                  />
                ) : null}
              </p.Stack>
            </p.Stack>
          </section>

          <section className={classNames(projectcss.all, sty.section__xGy8F)}>
            <p.Stack
              as={"div"}
              data-plasmic-name={"foreground3"}
              data-plasmic-override={overrides.foreground3}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground3)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___1Qj08)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__srkJt)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2___5Wrfd
                    )}
                  >
                    {"Integration made easy"}
                  </h2>
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hL5Tn
                  )}
                >
                  {
                    "cgmc+ automatically integrates all recommended mods into one easy install."
                  }
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__opHsr)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns___9F1Ws)}
                >
                  <div className={classNames(projectcss.all, sty.column__fMH)}>
                    <ValueProp
                      className={classNames(
                        "__wab_instance",
                        sty.valueProp__ojsuj
                      )}
                      darkBackground={true}
                      description={
                        "Every week, a mod is added or removed to improve performance, and the overall experience."
                      }
                      icon={
                        <Image34Icon
                          className={classNames(projectcss.all, sty.svg__xCtCv)}
                          role={"img"}
                        />
                      }
                      title={"New mods added every week"}
                      vertical={true}
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__lzLeM)}
                  >
                    <ValueProp
                      className={classNames(
                        "__wab_instance",
                        sty.valueProp__ivoEa
                      )}
                      darkBackground={true}
                      description={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lg8C7
                          )}
                        >
                          {
                            "Shaders make the CoraliaMC experience even better, by increasing detail of blocks, water, leaves, and more."
                          }
                        </div>
                      }
                      icon={
                        <WandIcon
                          className={classNames(projectcss.all, sty.svg__fk5Lt)}
                          role={"img"}
                        />
                      }
                      title={"Shaders support"}
                      vertical={true}
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__ogPvv)}
                  >
                    <ValueProp
                      className={classNames(
                        "__wab_instance",
                        sty.valueProp__rtfXn
                      )}
                      darkBackground={true}
                      description={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ulFbd
                          )}
                        >
                          {
                            "On Coralia+, you can get 120+ fps, even on slower PCs and Macs."
                          }
                        </div>
                      }
                      icon={
                        <FastIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___0EwWp
                          )}
                          role={"img"}
                        />
                      }
                      title={"Fast performance, even for potatoes."}
                      vertical={true}
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__e4Bmr)}
                  >
                    <ValueProp
                      className={classNames(
                        "__wab_instance",
                        sty.valueProp__c4V4
                      )}
                      darkBackground={true}
                      description={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__eGiN
                          )}
                        >
                          {
                            "You can use voice chat, without needing to use discord, guilded, or any other voice chat system."
                          }
                        </div>
                      }
                      icon={
                        <QuotessvgIcon
                          className={classNames(projectcss.all, sty.svg__lUkYx)}
                          role={"img"}
                        />
                      }
                      title={"Voice chat; no discord or guilded required"}
                      vertical={true}
                    />
                  </div>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </section>

          <Section
            data-plasmic-name={"checkpointsSection"}
            data-plasmic-override={overrides.checkpointsSection}
            background={"dark" as const}
            className={classNames("__wab_instance", sty.checkpointsSection)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__utDgu)}
              id={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("features" as const)
                  : ("features" as const)
              }
            >
              <div className={classNames(projectcss.all, sty.column__sL048)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__h9Id)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cz9D5
                    )}
                  >
                    {"BenefiTS"}
                  </div>

                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__bR5Mz
                    )}
                  >
                    {"What can it do for you?"}
                  </h2>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dk0GG
                    )}
                  >
                    {
                      "It makes the breathtaking CoraliaMC experience even better with Coralia+, plus voice chat; so all you need to do is connect, and talk; unlimited time; for free."
                    }
                  </div>

                  <Button
                    className={classNames("__wab_instance", sty.button__uaTma)}
                    color={"link" as const}
                    endIcon={
                      <ChevronRightIcon
                        className={classNames(projectcss.all, sty.svg___99JNe)}
                        role={"img"}
                      />
                    }
                    link={
                      "https://www.curseforge.com/minecraft/modpacks/cgmc" as const
                    }
                    outline={true}
                    showEndIcon={true}
                  >
                    <Icon5Icon
                      className={classNames(projectcss.all, sty.svg__rYrx6)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nP8Fi
                      )}
                    >
                      {"Download it now"}
                    </div>
                  </Button>

                  <Button
                    className={classNames("__wab_instance", sty.button__wk8Pa)}
                    color={"link" as const}
                    endIcon={
                      <ChevronRightIcon
                        className={classNames(projectcss.all, sty.svg___8Nt56)}
                        role={"img"}
                      />
                    }
                    link={
                      "https://www.curseforge.com/minecraft/modpacks/cgmc-no-optimizations" as const
                    }
                    outline={true}
                    showEndIcon={true}
                  >
                    <Icon5Icon
                      className={classNames(projectcss.all, sty.svg__xw5NC)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nP8Fi
                      )}
                    >
                      {"Download without optimizations"}
                    </div>
                  </Button>
                </p.Stack>
              </div>

              <div className={classNames(projectcss.all, sty.column__aGcl8)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___4Noww)}
                >
                  <ListItem
                    bottomBorder={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("dark" as const)
                        : ("dark" as const)
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.listItem__wdTdb
                    )}
                    icon={
                      <CheckCircleIcon
                        className={classNames(projectcss.all, sty.svg__eiyPn)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__prrXv
                      )}
                    >
                      {"Sodium"}
                    </div>
                  </ListItem>

                  <ListItem
                    bottomBorder={"dark" as const}
                    className={classNames(
                      "__wab_instance",
                      sty.listItem__lp22A
                    )}
                    icon={
                      <CheckCircleIcon
                        className={classNames(projectcss.all, sty.svg___95Yh)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jQnwV
                      )}
                    >
                      {"Simple Voice Chat"}
                    </div>
                  </ListItem>

                  <ListItem
                    bottomBorder={"dark" as const}
                    className={classNames(
                      "__wab_instance",
                      sty.listItem__v0DeB
                    )}
                    icon={
                      <CheckCircleIcon
                        className={classNames(projectcss.all, sty.svg__psdu)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hyew
                      )}
                    >
                      {"Xaero's Minimap and World Map"}
                    </div>
                  </ListItem>

                  <ListItem
                    bottomBorder={"dark" as const}
                    className={classNames(
                      "__wab_instance",
                      sty.listItem__px9Pa
                    )}
                    icon={
                      <CheckCircleIcon
                        className={classNames(projectcss.all, sty.svg__naByP)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qLdgN
                      )}
                    >
                      {"AppleSkin"}
                    </div>
                  </ListItem>

                  <ListItem
                    className={classNames(
                      "__wab_instance",
                      sty.listItem__ziefx
                    )}
                    icon={
                      <CheckCircleIcon
                        className={classNames(projectcss.all, sty.svg__zitzw)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__o1Eg9
                      )}
                    >
                      {"Iris"}
                    </div>
                  </ListItem>
                </div>
              </div>
            </p.Stack>
          </Section>

          <FooterSection
            data-plasmic-name={"footerSection"}
            data-plasmic-override={overrides.footerSection}
            className={classNames("__wab_instance", sty.footerSection)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "foreground4",
    "foreground3",
    "checkpointsSection",
    "footerSection"
  ],
  navbar: ["navbar"],
  foreground4: ["foreground4"],
  foreground3: ["foreground3"],
  checkpointsSection: ["checkpointsSection"],
  footerSection: ["footerSection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  foreground4: "div";
  foreground3: "div";
  checkpointsSection: typeof Section;
  footerSection: typeof FooterSection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCoralia__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCoralia__VariantsArgs;
    args?: PlasmicCoralia__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCoralia__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCoralia__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCoralia__ArgProps,
          internalVariantPropNames: PlasmicCoralia__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicCoralia__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCoralia";
  } else {
    func.displayName = `PlasmicCoralia.${nodeName}`;
  }
  return func;
}

export const PlasmicCoralia = Object.assign(
  // Top-level PlasmicCoralia renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    foreground4: makeNodeComponent("foreground4"),
    foreground3: makeNodeComponent("foreground3"),
    checkpointsSection: makeNodeComponent("checkpointsSection"),
    footerSection: makeNodeComponent("footerSection"),

    // Metadata about props expected for PlasmicCoralia
    internalVariantProps: PlasmicCoralia__VariantProps,
    internalArgProps: PlasmicCoralia__ArgProps
  }
);

export default PlasmicCoralia;
/* prettier-ignore-end */
